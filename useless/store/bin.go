package store

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func assets_master_pem() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x5c, 0xcf,
		0x49, 0x73, 0xb2, 0x30, 0x00, 0x80, 0xe1, 0x3b, 0xbf, 0xc2, 0xbb, 0xf3,
		0xcd, 0xf8, 0xd5, 0x58, 0xea, 0x31, 0x0b, 0x26, 0xd1, 0x40, 0x88, 0x2c,
		0x46, 0x6f, 0x6c, 0x8a, 0x94, 0xc5, 0x54, 0x2a, 0xe0, 0xaf, 0xef, 0xd4,
		0x63, 0xdf, 0xe3, 0x7b, 0x7b, 0xfe, 0xfd, 0x86, 0x1c, 0xca, 0xbd, 0x99,
		0x1f, 0x21, 0xc1, 0xf1, 0x6c, 0xe7, 0x1c, 0x5f, 0xd3, 0x72, 0x39, 0x3d,
		0xbb, 0x70, 0x41, 0x71, 0x60, 0x68, 0xc0, 0xd3, 0x25, 0x51, 0x0e, 0x82,
		0x2a, 0x82, 0x10, 0x50, 0x0f, 0x12, 0x8c, 0xae, 0x6a, 0x87, 0x2e, 0x0a,
		0xff, 0x1f, 0x17, 0x3a, 0xcd, 0x87, 0xa9, 0xe1, 0xac, 0x34, 0x12, 0xb8,
		0x62, 0x9d, 0x4a, 0xb7, 0x4e, 0xc4, 0xc1, 0x5a, 0xb7, 0x87, 0xe4, 0xa8,
		0x2e, 0xf3, 0x20, 0xcb, 0xd9, 0x37, 0xda, 0x67, 0x61, 0x48, 0xe6, 0x53,
		0x54, 0x15, 0xe1, 0x42, 0xdf, 0x8c, 0xd4, 0x74, 0xa3, 0xd9, 0x09, 0x1c,
		0x37, 0x6c, 0xdc, 0x6f, 0xdf, 0x71, 0x57, 0x7c, 0x95, 0xb5, 0x68, 0x71,
		0x99, 0xdc, 0x77, 0x83, 0x1f, 0xdb, 0x1a, 0xdb, 0x16, 0xa9, 0x4c, 0x24,
		0xae, 0x73, 0xbd, 0x1e, 0xb3, 0xae, 0x88, 0x6d, 0xff, 0xcc, 0xd9, 0x73,
		0xb4, 0xb7, 0xa0, 0x7d, 0x54, 0x59, 0xdf, 0x93, 0xc1, 0x6f, 0xe2, 0x49,
		0x82, 0x43, 0x1e, 0xa9, 0x02, 0x36, 0xe0, 0x19, 0x7e, 0x94, 0xab, 0xe5,
		0x96, 0x08, 0xb9, 0x32, 0x3d, 0x7e, 0xf8, 0x6f, 0xa3, 0xe5, 0xdd, 0xee,
		0xb4, 0x5e, 0xc6, 0x27, 0xd5, 0x81, 0xa0, 0x92, 0x9f, 0xcc, 0x28, 0x4e,
		0xa0, 0x82, 0xc8, 0x7a, 0x09, 0x1d, 0x8f, 0xfc, 0x45, 0xff, 0x04, 0x00,
		0x00, 0xff, 0xff, 0x4f, 0x12, 0x12, 0xba, 0x0f, 0x01, 0x00, 0x00,
		},
		"assets/master.pem",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"assets/master.pem": assets_master_pem,

}
